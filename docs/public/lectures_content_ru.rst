.. _lectures-content-label:

Краткий конспект лекций
=======================

Лекция 1. Установочная встреча.
-------------------------------

Знакомство с преподавателем. Общая структура курса. Формирование
итоговой оценки. Основные идеи, закладываемые в курс. Место курса в
образовательной программе. Создатель языка Python. Историческая
перспектива на версии языка. Семантическое версионирование. Области
использования языка.

Лекция 2. Примитивные типы. Условия.
------------------------------------

Типы ``int`` и ``float``. Способы создания: литералы и вызов типа.
Переменная как ссылка в памяти. Объект в памяти: значение, тип,
количество ссылок. Неизменяемость. Операции над числами. Краткая запись.
Отличия различных способов деления. Операторы сравнения. Тип ``bool``.
Структура условия: ``if/elif/else``. Явное и неявное приведение.
Форматирование нескольких условий. Особенности выполнения цепочек
условий с ``and`` и ``or``. Тип ``str``. Особенности создания строк.
Экранирование. Управляющие последовательности (``escape sequences``).

Лекция 3. Строки: неизменяемые последовательности.
--------------------------------------------------

Последовательности в ``Python``: ``str``, ``list`` и ``tuple``. Ключевые
свойства последовательностей. Индексируемость. Срезы: особенности
использования, синтаксиса. Срезы как способ копирования
последовательностей. Итерируемость. Варианты обхода последовательности:
по элементам, по индексам (``range``), одновременно по индексам и
значениям (``enumerate``). Взятие длины последовательности. Проверка на
вхождение. Получение минимального и максимального элементов. Подсчет
количества вхождений элемента. Получение индекса первого вхождения
элемента по его значению. Строковые методы. Особенности использования
методов ``split``, ``join``. Форматирование строк с помощью
``f-string``.

Лекция 4. Списки и кортежи.
---------------------------

Способы создания списков. Изменяемость списков: добавление, удаление и
изменение существующих элементов. Срезы как способ поверхностного
копирования. Ловушка разделяемых ссылок. Глубокое копирование.
Преимущества и недостатки различных способов копирования. Способы
создания кортежей. Структурная неизменяемость кортежей. Основные
преимущества от использования кортежей.

Лекция 5. Словари.
------------------

Способы создания словарей. Разница в поведении оператора квадратные
скобки при извлечении значений в словаре и списке. Изменяемость
словарей. Добавление новых элементов в словарь. Удаление элементов из
словаря. Изменение существующих элементов. Уникальность ключей.
Требования к ключам словаря. Итерирование по ключам, значениям и парам,
хранящимся в словаре. Проверка на вхождение ключа с помощью оператора
``in``. Получение размера словаря с помощью ``len()``.

Лекция 6. Функции.
------------------

Объявление функции с помощью ``def``. Требования и рекомендации к
именованию функций. Аргументы функции: позиционные и именованные.
Опциональные подсказки типов в описании аргументов и возвращаемых
значений. Вызов функции и её объявление. Возврат результатов функции с
помощью ``return``. Возврат и обработка нескольких значений.
Сопоставление аргументов при вызове функции: позиционное и по имени.
Произвольное количество аргументов функции при помощи ``*args`` и
``**kwargs``.

Лекция 7. Введение в ООП. Класс как пользовательский тип.
---------------------------------------------------------

Парадигмы программирования как способ борьбы с возрастающей сложностью
программного обеспечения. Состояние и поведение как ключевые факторы
программ, требующие управления. Императивно-процедурное
программирование. Функциональное программирование.
Объектно-ориентированное программирование. Класс как пользовательский
тип. Класс как совокупность свойств и поведения. Синтаксис создания
классов. Объект ``self``. Создание атрибутов экземпляров. Роль метода
``__init__``. Доступ к атрибутам и методам экземпляра внутри контекста
класса и за его пределами.
